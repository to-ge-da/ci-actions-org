name: Migrate GitLab repository
run-name: Migrate repository from GitLab to GitHub by ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      run-migrate:
        description: Migrate repository
        required: true
        type: boolean
      gitlab-project-id:
        description: |
          GitLab project ID
        required: true
        type: string
      github-account-type:
        description: |
          GitHub account type
        required: true
        type: choice
        options:
          - org
          - user

env:
  GITHUB_URL: https://github.com
  GITLAB_API_URL: "https://gitlab.com/api/v4"
  GITHUB_ORG_NAME: to-ge-da
  GITHUB_AUTH_TOKEN: ${{ secrets.GH_TOKEN_WORKFLOW }}
  GITLAB_AUTH_TOKEN: ${{ secrets.GL_AUTH_TOKEN }}

jobs:
  github-fetch-data:
    name: Fetch data from GitHub authenticated user
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: GitHub - CLI auth login
        run: echo "${{ env.GITHUB_AUTH_TOKEN }}" | gh auth login --with-token

      - name: GitHub - Get currently authenticated user
        run: |
          echo "GITHUB_VIEWER=$(gh api graphql -f query='query { viewer { login } }' --jq '.data.viewer.login')" >> "$GITHUB_OUTPUT"

      - name: Generate final summary
        run: |
          echo "- GitHub user: ${{ steps.github-fetch-data.outputs.GITHUB_VIEWER }}" >> $GITHUB_STEP_SUMMARY

  gitlab-fetch-data:
    name: "Fetch data from GitLab repository ID: ${{ inputs.gitlab-project-id }}"
    runs-on: ubuntu-latest
    needs: github-fetch-data
    env:
      GITLAB_PROJECT_ID: ${{ inputs.gitlab-project-id }}
    outputs:
      REPOSITORY_NAME: ${{ steps.gitlab-fetch-data.outputs.GITLAB_REPO_NAME }}
      REPOSITORY_USER: ${{ steps.gitlab-fetch-data.outputs.GITLAB_USERNAME }}
      REPOSITORY_CLONE_URL: ${{ steps.gitlab-fetch-data.outputs.GITLAB_CLONE_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GitLab urls
        run: |
          echo "GITLAB_USER_URL=${GITLAB_API_URL/%/\/user}" >> "$GITHUB_ENV"
          echo "GITLAB_PROJECT_URL=${GITLAB_API_URL/%/\/projects\/${GITLAB_PROJECT_ID}}" >> "$GITHUB_ENV"

      - name: Fetch information from the GitLab repository
        id: gitlab-fetch-data
        run: |
          echo "GITLAB_USERNAME=$(curl -H "PRIVATE-TOKEN: ${{ env.TOKEN }}" -s "${{ env.USER_URL }}" | jq -r '.username')" >> "$GITHUB_OUTPUT"
          echo "GITLAB_REPO_NAME=$(curl -H "PRIVATE-TOKEN: ${{ env.TOKEN }}" -s "${{ env.REPO_URL }}" | jq -r '.name')" >> "$GITHUB_OUTPUT"
          echo "GITLAB_CLONE_URL=$(curl -H "PRIVATE-TOKEN: ${{ env.TOKEN }}" -s "${{ env.REPO_URL }}" | jq -r '.http_url_to_repo')" >> "$GITHUB_OUTPUT"
        shell: bash
        env:
          TOKEN: ${{ env.GITLAB_AUTH_TOKEN }}
          USER_URL: ${{ env.GITLAB_USER_URL }}
          REPO_URL: ${{ env.GITLAB_PROJECT_URL }}
          
      - name: Generate final summary
        run: |
          echo "- GitLab user: ${{ steps.gitlab-fetch-data.outputs.GITLAB_USERNAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitLab repository name: ${{ steps.gitlab-fetch-data.outputs.GITLAB_REPO_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitLab repository clone url: ${{ steps.gitlab-fetch-data.outputs.GITLAB_CLONE_URL }}" >> $GITHUB_STEP_SUMMARY
          
  github-create-repo:
    name: Create target GitHub repository
    runs-on: ubuntu-latest
    if: inputs.run-migrate
    needs: gitlab-fetch-data
    env:
      GITHUB_REPOSITORY_NAME: ${{ needs.gitlab-fetch-data.outputs.REPOSITORY_NAME }}

    steps:
      - name: Checkout github-rest-api repository
        uses: actions/checkout@v4
        with:
          repository: lbrealdev/github-rest-api

      - name: Setup rye
        uses: eifinger/setup-rye@v1

      - name: Rye sync
        run: rye sync --no-lock

      - name: GitHub - Create target repository in GitHub Org
        id: github-rest-api
        run: |
          source .venv/bin/activate
          echo "OUTPUT=$(github-rest-api create-repo -n ${{ env.GITHUB_REPOSITORY_NAME }} -o ${{ env.GITHUB_ORG_NAME }} -v private)" >> $GITHUB_OUTPUT

      - name: GitHub - Repository output
        id: handle-output
        if: ${{ contains(steps.github-rest-api.outputs.OUTPUT, 'Repository name already exists') }}
        run: |
          echo "### Error: ${{ steps.github-rest-api.outputs.OUTPUT }}" >> $GITHUB_STEP_SUMMARY
          exit 1
          
  migration-repository:
    name: Migrate repository from GitLab to GitHub
    runs-on: ubuntu-latest
    if: inputs.run-migrate
    needs: 
      - gitlab-fetch-data
      - github-create-repo
    env:
      GITLAB_USERNAME: ${{ needs.gitlab-fetch-data.outputs.REPOSITORY_USER }}
      GITHUB_TARGET_REPOSITORY: ${{ needs.gitlab-fetch-data.outputs.REPOSITORY_NAME }}
      GITLAB_SOURCE_REPOSITORY: ${{ needs.gitlab-fetch-data.outputs.REPOSITORY_CLONE_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITHUB_ORG_NAME }}/${{ env.GITHUB_TARGET_REPOSITORY }}
          token: ${{ env.GITHUB_AUTH_TOKEN }}
          path: target

      - name: Set up GitHub url
        run: |
          echo "GITHUB_CLONE_URL=${GITHUB_URL/%/\/"${{ env.GITHUB_ORG_NAME }}"\/"${{ env.GITHUB_TARGET_REPOSITORY }}".git}" >> $GITHUB_ENV

      - name: GitLab - Clone source repository
        id: gitlab-clone-repo
        run: |
          SOURCE_AUTH_URL=${GITLAB_SOURCE_REPOSITORY/https:\/\//https:\/\/"${{ env.GITLAB_USERNAME }}":"${{ env.GITLAB_AUTH_TOKEN }}"@}
          echo "BARE_REPO_DIR=${SOURCE_AUTH_URL#*"${{ env.GITLAB_USERNAME }}"\/}" >> $GITHUB_OUTPUT
          git clone --bare "$SOURCE_AUTH_URL" -q

      - name: GitHub - Push repository mirror
        run: |
          TARGET_AUTH_URL=${TARGET_URL/https:\/\//https:\/\/"${{ env.GITHUB_AUTH_TOKEN }}"@}
          git push --mirror "$TARGET_AUTH_URL" -q |& : || true
        env:
          TARGET_URL: ${{ env.GITHUB_CLONE_URL }}
        working-directory: ${{ steps.gitlab-clone-repo.outputs.BARE_REPO_DIR }}

      - name: GitHub - Configure branch in target repository
        run: |
          git pull -q
          git checkout master -q
          git push origin master:main --force-with-lease -q
          git branch -f main origin/main -q
          git push -d origin master -q
          git checkout main -q
        working-directory: target

      - name: Generate final summary
        run: |
          GITHUB_FINAL_URL=${GITHUB_CLONE_URL::-4}
          echo "### GitHub repository: $GITHUB_FINAL_URL" >> $GITHUB_STEP_SUMMARY
